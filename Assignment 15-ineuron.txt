1.Given an array arr[ ] of size N having elements, the task is to find the next greater element for each element of the array in order of their appearance in the array.Next greater element of an element in the array is the nearest element on the right which is greater than the current element.If there does not exist next greater of current element, then next greater element for current element is -1. For example, next greater of the last element is always -1.

Input:
N = 4, arr[] = [1 3 2 4]
Output:
3 4 4 -1
Explanation:
In the array, the next larger element
to 1 is 3 , 3 is 4 , 2 is 4 and for 4 ?
since it doesn't exist, it is -1.

Input:
N = 5, arr[] [6 8 0 1 3]
Output:
8 -1 1 3 -1
Explanation:
In the array, the next larger element to
6 is 8, for 8 there is no larger elements
hence it is -1, for 0 it is 1 , for 1 it
is 3 and then for 3 there is no larger
element on right and hence -1.

import java.util.Arrays;
import java.util.Stack;

public class NextGreaterElement {

    public static int[] findNextGreaterElement(int[] arr) {
        int n = arr.length;
        int[] result = new int[n];
        Arrays.fill(result, -1);  // Initialize result array with -1

        Stack<Integer> stack = new Stack<>();
        stack.push(0);  // Push the index of the first element

        for (int i = 1; i < n; i++) {
            while (!stack.isEmpty() && arr[i] > arr[stack.peek()]) {
                result[stack.pop()] = arr[i];  // Set the next greater element for the popped index
            }
            stack.push(i);  // Push the current index into the stack
        }

        return result;
    }

    public static void main(String[] args) {
        int[] arr = {1, 3, 2, 4};
        int[] nextGreater = findNextGreaterElement(arr);
        System.out.println(Arrays.toString(nextGreater));
    }
}
2.Given an array a of integers of length n, find the nearest smaller number for every element such that the smaller element is on left side.If no small element present on the left print -1.
Input: n = 3
a = {1, 6, 2}
Output: -1 1 1
Explaination: There is no number at the
left of 1. Smaller number than 6 and 2 is 1.

Input: n = 6
a = {1, 5, 0, 3, 4, 5}
Output: -1 1 -1 0 3 4
Explaination: Upto 3 it is easy to see
the smaller numbers. But for 4 the smaller
numbers are 1, 0 and 3. But among them 3
is closest. Similary for 5 it is 4.

ans-:
import java.util.Arrays;
import java.util.Stack;

public class NearestSmallerElement {

    public static int[] findNearestSmallerElement(int[] arr) {
        int n = arr.length;
        int[] result = new int[n];
        Arrays.fill(result, -1);  // Initialize result array with -1

        Stack<Integer> stack = new Stack<>();
        stack.push(arr[0]);  // Push the first element into the stack

        for (int i = 1; i < n; i++) {
            while (!stack.isEmpty() && stack.peek() >= arr[i]) {
                stack.pop();  // Pop elements greater than or equal to the current element
            }

            if (!stack.isEmpty()) {
                result[i] = stack.peek();  // Set the nearest smaller element
            }

            stack.push(arr[i]);  // Push the current element into the stack
        }

        return result;
    }

    public static void main(String[] args) {
        int[] arr = {1, 6, 2};
        int[] nearestSmaller = findNearestSmallerElement(arr);
        System.out.println(Arrays.toString(nearestSmaller));
    }
}
3.Implement a Stack using two queues q1 and q2.
Input:
push(2)
push(3)
pop()
push(4)
pop()
Output:3 4
Explanation:
push(2) the stack will be {2}
push(3) the stack will be {2 3}
pop()   poped element will be 3 the
        stack will be {2}
push(4) the stack will be {2 4}
pop()   poped element will be 4

Input:
push(2)
pop()
pop()
push(3)
Output:2 -1

ans-:
import java.util.LinkedList;
import java.util.Queue;

public class StackUsingQueues {
    Queue<Integer> q1 = new LinkedList<>();
    Queue<Integer> q2 = new LinkedList<>();

    void push(int data) {
        q1.add(data);
    }

    int pop() {
        if (q1.isEmpty()) {
            return -1;  // Stack is empty
        }

        // Move elements from q1 to q2 except the last element
        while (q1.size() > 1) {
            q2.add(q1.remove());
        }

        // Retrieve the last element from q1
        int poppedElement = q1.remove();

        // Swap the names of q1 and q2
        Queue<Integer> temp = q1;
        q1 = q2;
        q2 = temp;

        return poppedElement;
    }

    public static void main(String[] args) {
        StackUsingQueues stack = new StackUsingQueues();
        stack.push(2);
        stack.push(3);
        System.out.println(stack.pop());  // Output: 3
        stack.push(4);
        System.out.println(stack.pop());  // Output: 4
    }
}
4.You are given a stack St. You have to reverse the stack using recursion.

Input:St = {3,2,1,7,6}
Output:{6,7,1,2,3}

Input:St = {4,3,9,6}
Output:{6,9,3,4}

ans-:
import java.util.Stack;

public class ReverseStackRecursion {
    public static void reverseStack(Stack<Integer> stack) {
        if (stack.isEmpty() || stack.size() == 1) {
            return;  // Base case: stack is already reversed
        }

        int temp = stack.pop();
        reverseStack(stack);
        insertAtBottom(stack, temp);
    }

    private static void insertAtBottom(Stack<Integer> stack, int element) {
        if (stack.isEmpty()) {
            stack.push(element);
            return;
        }

        int temp = stack.pop();
        insertAtBottom(stack, element);
        stack.push(temp);
    }

    public static void main(String[] args) {
        Stack<Integer> stack1 = new Stack<>();
        stack1.push(3);
        stack1.push(2);
        stack1.push(1);
        stack1.push(7);
        stack1.push(6);
        System.out.println("Original Stack: " + stack1);
        reverseStack(stack1);
        System.out.println("Reversed Stack: " + stack1);

        Stack<Integer> stack2 = new Stack<>();
        stack2.push(4);
        stack2.push(3);
        stack2.push(9);
        stack2.push(6);
        System.out.println("Original Stack: " + stack2);
        reverseStack(stack2);
        System.out.println("Reversed Stack: " + stack2);
    }
}
5.You are given a string S, the task is to reverse the string using stack.
Input: S="GeeksforGeeks"
Output: skeeGrofskeeG

ans-:
import java.util.Stack;

public class ReverseStringStack {
    public static String reverseString(String str) {
        Stack<Character> stack = new Stack<>();

        // Push each character onto the stack
        for (char ch : str.toCharArray()) {
            stack.push(ch);
        }

        StringBuilder reversedStr = new StringBuilder();

        // Pop each character from the stack and append to reversed string
        while (!stack.isEmpty()) {
            reversedStr.append(stack.pop());
        }

        return reversedStr.toString();
    }

    public static void main(String[] args) {
        String str = "GeeksforGeeks";
        String reversedStr = reverseString(str);
        System.out.println(reversedStr);
    }
}
6.Given string S representing a postfix expression, the task is to evaluate the expression and find the final value. Operators will only include the basic arithmetic operators like *, /, + and -.

Input: S = "231*+9-"
Output: -4
Explanation:
After solving the given expression,
we have -4 as result.

Input: S = "123+*8-"
Output: -3
Explanation:
After solving the given postfix
expression, we have -3 as result.

ans-:
import java.util.Stack;

public class EvaluatePostfixExpression {
    public static int evaluatePostfix(String postfixExpression) {
        Stack<Integer> stack = new Stack<>();

        // Iterate through each character in the postfix expression
        for (char ch : postfixExpression.toCharArray()) {
            // If the character is an operand, push it onto the stack
            if (Character.isDigit(ch)) {
                stack.push(ch - '0');  // Convert char to int and push onto stack
            } else {
                // If the character is an operator, perform the corresponding operation
                int operand2 = stack.pop();
                int operand1 = stack.pop();
                int result = performOperation(ch, operand1, operand2);
                stack.push(result);
            }
        }

        // The final result will be the top element of the stack
        return stack.pop();
    }

    private static int performOperation(char operator, int operand1, int operand2) {
        switch (operator) {
            case '+':
                return operand1 + operand2;
            case '-':
                return operand1 - operand2;
            case '*':
                return operand1 * operand2;
            case '/':
                return operand1 / operand2;
            default:
                throw new IllegalArgumentException("Invalid operator: " + operator);
        }
    }

    public static void main(String[] args) {
        String postfixExpression1 = "231*+9-";
        int result1 = evaluatePostfix(postfixExpression1);
        System.out.println("Result: " + result1);  // Output: -4

        String postfixExpression2 = "123+*8-";
        int result2 = evaluatePostfix(postfixExpression2);
        System.out.println("Result: " + result2);  // Output: -3
    }
}
7.Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.

Implement the `MinStack` class:

- `MinStack()` initializes the stack object.
- `void push(int val)` pushes the element `val` onto the stack.
- `void pop()` removes the element on the top of the stack.
- `int top()` gets the top element of the stack.
- `int getMin()` retrieves the minimum element in the stack.

You must implement a solution with `O(1)` time complexity for each function.

Input
["MinStack","push","push","push","getMin","pop","top","getMin"]
[[],[-2],[0],[-3],[],[],[],[]]

Output
[null,null,null,null,-3,null,0,-2]

Explanation
MinStack minStack = new MinStack();
minStack.push(-2);
minStack.push(0);
minStack.push(-3);
minStack.getMin(); // return -3
minStack.pop();
minStack.top();    // return 0
minStack.getMin(); // return -2

ans-:
import java.util.Stack;

class MinStack {
    private Stack<Integer> stack;
    private Stack<Integer> minStack;

    /** initialize your data structure here. */
    public MinStack() {
        stack = new Stack<>();
        minStack = new Stack<>();
    }

    public void push(int val) {
        stack.push(val);

        if (minStack.isEmpty() || val <= minStack.peek()) {
            minStack.push(val);
        }
    }

    public void pop() {
        if (stack.peek().equals(minStack.peek())) {
            minStack.pop();
        }
        stack.pop();
    }

    public int top() {
        return stack.peek();
    }

    public int getMin() {
        return minStack.peek();
    }
}

public class Main {
    public static void main(String[] args) {
        MinStack minStack = new MinStack();
        minStack.push(-2);
        minStack.push(0);
        minStack.push(-3);
        System.out.println(minStack.getMin());  // Output: -3
        minStack.pop();
        System.out.println(minStack.top());     // Output: 0
        System.out.println(minStack.getMin());  // Output: -2
    }
}

8.Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.

Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6
Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.

Input: height = [4,2,0,3,2,5]
Output: 9

ans-:
public class TrappingRainWater {
    public static int trap(int[] height) {
        int left = 0;
        int right = height.length - 1;
        int leftMax = 0;
        int rightMax = 0;
        int water = 0;

        while (left < right) {
            if (height[left] < height[right]) {
                if (height[left] >= leftMax) {
                    leftMax = height[left];
                } else {
                    water += leftMax - height[left];
                }
                left++;
            } else {
                if (height[right] >= rightMax) {
                    rightMax = height[right];
                } else {
                    water += rightMax - height[right];
                }
                right--;
            }
        }

        return water;
    }

    public static void main(String[] args) {
        int[] height1 = {0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1};
        System.out.println(trap(height1));  // Output: 6

        int[] height2 = {4, 2, 0, 3, 2, 5};
        System.out.println(trap(height2));  // Output: 9
    }
}









